/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package backup2;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author ACER
 */
public class deleteData extends javax.swing.JFrame {
    PBOLGUI p = new PBOLGUI();
    /**
     * Creates new form deleteData
     */
    public deleteData() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nimText = new javax.swing.JTextField();
        deleteButtom = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        kodeBukuText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocation(new java.awt.Point(600, 300));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setText("NIM  ");

        nimText.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        nimText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nimTextActionPerformed(evt);
            }
        });

        deleteButtom.setText("Kembalikan");
        deleteButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtomActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("Kode Buku");

        kodeBukuText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kodeBukuTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteButtom)
                            .addComponent(kodeBukuText)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(161, 161, 161)
                                .addComponent(cancelButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(nimText, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nimText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kodeBukuText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButtom)
                    .addComponent(cancelButton))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nimTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nimTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nimTextActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void deleteButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtomActionPerformed
        // TODO add your handling code here:
        if (DataNim()==true && dataBook()==true && dataBookPinjam()==true) {
            hapusData();
            updateDataStatus();
        }else{
            JOptionPane.showMessageDialog(null, "terdapat kesalahan yang kami temukan dari NIM atau Kode Buku","ERROR MEssege",JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_deleteButtomActionPerformed

    private void kodeBukuTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kodeBukuTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kodeBukuTextActionPerformed

    public void updateDataStatus() {
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;

    conn = p.getConnection();

    try {
        // Query untuk mendapatkan nilai yang ingin diubah
        String selectQuery = "SELECT judul FROM databuku where kodebuku = ?";
        ps = conn.prepareStatement("select * from databuku where kodebuku = ?");
        ps.setString(1, kodeBukuText.getText());
        rs = ps.executeQuery();

        // Jika data ditemukan dalam ResultSet
        if (rs.next()) {
            // Mengambil nilai yang ingin diubah dari ResultSet
            String judul =rs.getString(2);

            // PreparedStatement untuk melakukan update
            //String updateQuery = "update databuku SET judul = ?, status = ? where kodebuku = ?";
            ps = conn.prepareStatement("update databuku SET judul = ?, status = ? where kodebuku = ?");
            
            // Set parameter PreparedStatement sesuai urutan
            ps.setString(1, judul);
            ps.setString(2, "Y");
            ps.setString(3, kodeBukuText.getText());

            // Execute the update
            int rowsUpdated = ps.executeUpdate();

            // Check if the update was successful
            if (rowsUpdated > 0) {
                conn.commit();
                JOptionPane.showMessageDialog(null,"Data sudah diperbaiki!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);

                System.out.println("Data sudah diperbaiki!");
            } else {
                JOptionPane.showMessageDialog(null,"No data found for the given Kode Buku: " + kodeBukuText.getText(), "INFORMATION", JOptionPane.ERROR_MESSAGE);

                System.out.println("No data found for the given Kode Buku: " + kodeBukuText.getText());
            }
        } else {
            JOptionPane.showMessageDialog(null,"No data found for the given Kode Buku: " + kodeBukuText.getText(), "INFORMATION", JOptionPane.ERROR_MESSAGE);

            System.out.println("No data found for the given Kode Buku: " + kodeBukuText.getText());
        }
    } catch (SQLException ex) {
        // Handle any SQL exceptions
        System.out.println(ex.getMessage());
    } finally {
        try {
            // Close resources in the reverse order of their creation
            if (rs != null) {
                rs.close();
            }
            if (ps != null) {
                ps.close();
            }
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }
}


    
     public void hapusData() {
        Connection conn = null;
        PreparedStatement ps = null;
        
        conn = p.getConnection();

        try {
            ps = conn.prepareStatement("delete from perpus where nim_nik_nip = ?");
            ps.setString(1, nimText.getText());
            ps.executeUpdate();
            conn.commit();
            
           
                conn.commit();
                JOptionPane.showMessageDialog(null,"Buku sudah dikembalikan", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);

            System.out.println("Data sudah dihapus");
           
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,ex.getMessage(), "INFORMATION", JOptionPane.ERROR_MESSAGE);

            System.out.println(ex.getMessage());
        } finally {
            try {
                ps.close();
                conn.close();
            } catch (SQLException ex) {
                 JOptionPane.showMessageDialog(null,ex.getMessage(), "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
                System.out.println(ex.getMessage());
            }
        }
    }
     
     
        public boolean DataNim() {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        conn = p.getConnection();
        try {
            // Use a PreparedStatement to safely set the parameter in the SQL query
            ps = conn.prepareStatement("select * from perpus where nim_nik_nip = ?");
            ps.setString(1, nimText.getText());

            // Execute the query
            rs = ps.executeQuery();

            // Check if there is any data in the result set
            if (rs.next()) {
                if (rs.getString(7).equalsIgnoreCase(kodeBukuText.getText())) {
                    return true;
                }
                
            } else{
                JOptionPane.showMessageDialog(null, "No data found for NIM: " + nimText.getText(), "INFORMATION", JOptionPane.INFORMATION_MESSAGE);

                System.out.println("No data found for NIM: " + nimText.getText());
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } finally {
            try {
                // Close resources in the reverse order of their creation
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

                System.out.println(ex.getMessage());
            }
        }
        return false;
    }
        
    public boolean dataBook() {
        
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int indeks=0;

        conn = p.getConnection();

        try {
            // Query untuk mencari buku berdasarkan kode atau nama
            String searchQuery = "SELECT * FROM databuku WHERE kodebuku = ?";
            ps = conn.prepareStatement(searchQuery);
            ps.setString(1, kodeBukuText.getText()); // Menggunakan parameter pertama untuk kode buku
            
            // Eksekusi query
            rs = ps.executeQuery();

            // Menampilkan hasil pencarian
             if (rs.next()) {
                return true;
            } else{
                JOptionPane.showMessageDialog(null, "No data found for NIM: " +kodeBukuText.getText(), "INFORMATION", JOptionPane.INFORMATION_MESSAGE);

                System.out.println("No data found for NIM: " + kodeBukuText.getText());
            }
        } catch (SQLException ex) {
             JOptionPane.showMessageDialog(null,"Error saat melakukan pencarian: " + ex.getMessage(), "INFORMATION", JOptionPane.ERROR_MESSAGE);

            System.out.println("Error saat melakukan pencarian: " + ex.getMessage());
        } finally {
            // Tutup sumber daya
            try {
                if (rs != null) rs.close();
                if (ps != null) ps.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                System.out.println("Error saat menutup sumber daya: " + ex.getMessage());
            }
        }
        return false;
    }
 public boolean dataBookPinjam() {
        
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int indeks=0;

        conn = p.getConnection();

        try {
            // Query untuk mencari buku berdasarkan kode atau nama
            String searchQuery = "SELECT * FROM perpus WHERE kodebuku = ?";
            ps = conn.prepareStatement(searchQuery);
            ps.setString(1, kodeBukuText.getText()); // Menggunakan parameter pertama untuk kode buku
            
            // Eksekusi query
            rs = ps.executeQuery();

            // Menampilkan hasil pencarian
             if (rs.next()) {
                return true;
            } else{
                JOptionPane.showMessageDialog(null, "No data found for NIM: " +kodeBukuText.getText(), "INFORMATION", JOptionPane.INFORMATION_MESSAGE);

                System.out.println("No data found for NIM: " + kodeBukuText.getText());
            }
        } catch (SQLException ex) {
             JOptionPane.showMessageDialog(null,"Error saat melakukan pencarian: " + ex.getMessage(), "INFORMATION", JOptionPane.ERROR_MESSAGE);

            System.out.println("Error saat melakukan pencarian: " + ex.getMessage());
        } finally {
            // Tutup sumber daya
            try {
                if (rs != null) rs.close();
                if (ps != null) ps.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                System.out.println("Error saat menutup sumber daya: " + ex.getMessage());
            }
        }
        return false;
    }
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(deleteData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(deleteData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(deleteData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(deleteData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new deleteData().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton deleteButtom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField kodeBukuText;
    private javax.swing.JTextField nimText;
    // End of variables declaration//GEN-END:variables
}
